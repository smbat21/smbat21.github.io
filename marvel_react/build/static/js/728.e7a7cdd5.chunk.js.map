{"version":3,"file":"static/js/728.e7a7cdd5.chunk.js","mappings":"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","sources":["components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService'\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n\n    const {loading, error, getCharacters, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacters(id)\n            .then(onCharLoaded);\n    }\n\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(error || loading) ? <View char={char} /> : null\n\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki } = char;\n\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'unset' };\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport PropTypes from 'prop-types';\n\nimport './charList.scss';\n\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true)\n    }, [])\n\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded);\n    }\n \n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList([...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = id => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n\n            return (\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyDown={e => {\n                        if (e.key === ' ' || e.key === 'Enter') {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}\n                >\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ display: charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">{'<<---'} Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService'\nimport PropTypes from 'prop-types';\n\n\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton'\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacters, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    const updateChar = () => {\n        const { charId } = props\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacters(charId)\n            .then(onCharLoaded);\n\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n\n    const skeleton = char || loading || error ? null : <Skeleton />\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(error || loading || !char) ? <View char={char} /> : null\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = char\n\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'unset' };\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">name</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics'}\n                {\n                    comics.map((item, i) => {\n                        for (i; i < 10; i++) {\n                            return (\n                                <li key={i} className=\"char__comics-item\">\n                                    {item.name}\n                                </li>\n                            )\n                        }\n\n                    })\n                }\n\n\n            </ul>\n        </>\n    )\n}\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(err, info) {\r\n        this.setState({ error: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />\r\n        }\r\n\r\n        return this.props.children \r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null)\r\n\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n\r\n            <div className=\"char__content\">\r\n\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar} />\r\n                </ErrorBoundary>\r\n\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"names":["View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","useState","setChar","useMarvelService","loading","error","getCharacters","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","renderItems","disabled","display","comics","charId","skeleton","ErrorBoundary","state","err","info","this","setState","children","Component","selectedChar","decoration"],"sourceRoot":""}